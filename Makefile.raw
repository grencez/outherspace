
default: default_exes

###### Optional user-defined variables ######
# Override default CONFIG value (see below).
Flags =
# Prefix all output files. May include directory path.
Pfx=

# These are used when OpenCL is enabled.
#OpenCLPath = $(HOME)/ati-stream-sdk-v2.3-lnx64
OpenCLPath=

#CC = clang
CC = gcc
#CC = llvm-gcc
#CC = icc

# Use CONFIG += c++ with these.
#CXX = clang++
CXX = g++

CONFIG += image
#CONFIG += sound

#CONFIG += 4d
#CONFIG += c++
CONFIG += ansi
#CONFIG += errwarn
#CONFIG += c99
CONFIG += fast
#CONFIG += snappy
#CONFIG += debug
#CONFIG += ultradebug  # -fast -snappy -debug
CONFIG += openmp
#CONFIG += opencl
#CONFIG += mpi  # -ansi
#CONFIG += trivialmpi  # +mpi
#CONFIG += profile
#CONFIG += benchmark  # +noassert
#CONFIG += noassert
#CONFIG += macapp
#CONFIG += haptic
#CONFIG += opengl match4dgeom
CONFIG += opengl
CONFIG += embed_files
#CONFIG += local_sdl
#CONFIG += sunstudio

# Use only for testing, slower in the general case.
#CONFIG += sse

ifneq (,$(Flags))
	CONFIG = $(Flags)
endif


###### Notes for me ######

# For ICC:
#   source $HOME/local/stow/icc-2011.5.220/bin/iccvars.sh intel64


#LD_PRELOAD=$(pfx)/lib/valgrind/libmpiwrap-x86-linux.so \
#	mpirun -np 3 valgrind ./cli 2>&1 | tee out

#valgrind --num-callers=50 --db-attach=yes --db-command='cgdb -- %f %p'

PfxBldPath = $(Pfx)bld
CxPath = ../cx
BinPath = ../bin
BldPath = outherspace


EmbedSfx=.embed.h
OpenCLLibPath=
ifneq (,$(OpenCLPath))
	OpenCLLibPath=$(OpenCLPath)/lib/x86_64
endif

ifeq ($(CC),icc)
	#CFLAGS += -Wremarks
else ifneq (,$(filter sunstudio,$(CONFIG)))
	# Nothing!
	# But do note that, if using OpenMP,
	# the OMP_NUM_THREADS environment variable must be set!
else
	#CFLAGS += -fwhole-program
	#CFLAGS += -Wall -Wextra
endif

#DFLAGS += -DIncludeC

ifneq (,$(filter image,$(CONFIG)))
	GuiDFlags += -DSupportImage
endif
ifneq (,$(filter sound,$(CONFIG)))
	GuiDFlags += -DSupportSound
endif

ifneq (,$(filter 4d,$(CONFIG)))
	DFLAGS += -DNDimensions=4
endif

GuiCFiles = gui.c
GuiHFiles = gui-indep.c
ifneq (,$(filter macapp,$(CONFIG)))
	# Everything on this OS X setup is 32 bit.
	CFLAGS += -m32
	DFLAGS += -DRunFromMyMac
	GuiCFlags += -I/Library/Frameworks/SDL.framework/Headers
	GuiLFlags += -framework SDL
	GuiLFlags += -framework cocoa
	# Need a wrapper around the main function.
	GuiHFiles += sdl-main-osx.m
	CFLAGS := $(filter-out -fwhole-program,$(CFLAGS))
	ifneq (,$(filter image,$(CONFIG)))
		GuiCFlags += -I/Library/Frameworks/SDL_image.framework/Headers
		GuiLFlags += -framework SDL_image
	endif
	ifneq (,$(filter sound,$(CONFIG)))
		GuiCFlags += -I/Library/Frameworks/SDL_mixer.framework/Headers
		GuiLFlags += -framework SDL_mixer
	endif
else
	ifneq (,$(filter local_sdl,$(CONFIG)))
		GuiCFlags += $(shell sdl-config --prefix=$(HOME)/local --cflags)
		GuiLFlags += $(shell sdl-config --prefix=$(HOME)/local --libs)
	else
		GuiCFlags += $(shell pkg-config --cflags sdl)
		GuiLFlags += $(shell pkg-config --libs sdl)
	endif
	ifneq (,$(filter image,$(CONFIG)))
		ifneq (,$(filter local_sdl,$(CONFIG)))
			GuiLFlags += -L$(HOME)/local/lib
		endif
		GuiLFlags += -lSDL_image
	endif
	ifneq (,$(filter sound,$(CONFIG)))
		GuiLFlags += -lSDL_mixer
	endif
	ifneq (,$(filter opengl,$(CONFIG)))
		GuiLFlags += -lGLU -lGL
	endif
endif
ifneq (,$(filter haptic,$(CONFIG)))
	GuiDFlags += -DSupportHaptic
endif

## Go really fast.
ifneq (,$(filter fast,$(CONFIG)))
	ifneq (,$(filter sunstudio,$(CONFIG)))
		CFLAGS += -xO3
		CONFIG := $(filter-out fast,$(CONFIG))
	endif
	#CFLAGS += -ftree-vectorizer-verbose=2
	#CFLAGS += -Ofast
	#CFLAGS += -march=native
	#CFLAGS += -ffast-math
	#CFLAGS += -march=native -mtune=native
endif

## Enable benchmarking. (take out file writes)
ifneq (,$(filter benchmark,$(CONFIG)))
	CFLAGS += -DBENCHMARKING
	CONFIG += noassert
endif
## Do we have bool type?
ifneq (,$(filter c++,$(CONFIG)))
	CC = $(CXX)
	#CFLAGS += -fno-rtti
endif
## Allow distributed parallelism.
ifneq (,$(filter mpi trivialmpi,$(CONFIG)))
	ifneq (,$(filter c++,$(CONFIG)))
		CC = mpicxx
	else
		CC = mpicc
	endif
	# OpenMPI headers currently don't play well with C89.
	CONFIG := $(filter-out ansi,$(CONFIG))
	DFLAGS += -DDistribCompute
	# Use the ray tracer that disregards load balancing and compression.
	ifneq (,$(filter trivialmpi,$(CONFIG)))
		DFLAGS += -DTrivialMpiRayTrace
	else
		DFLAGS += -DCompressBigCompute
		LFLAGS += -lz
	endif
endif
## Use the C99 standard.
ifneq (,$(filter c99,$(CONFIG)))
	CFLAGS += -std=c99
endif
## Stick to the ANSI standard.
ifneq (,$(filter ansi,$(CONFIG)))
	ifneq (,$(filter sunstudio,$(CONFIG)))
		CC = c89
		# SDL has a couple // comments, hope this is fixed someday.
		GuiCFlags += -xCC
		# SDL uses incompatible __inline__ qualifier.
		GuiDFlags += -D__inline__=""
		CONFIG := $(filter-out ansi,$(CONFIG))
	endif
endif
ifneq (,$(filter opencl,$(CONFIG)))
	GuiHFiles += gui-opencl.c
	ifneq (,$(OpenCLPath))
		GuiCFlags += -I$(OpenCLPath)/include
		GuiLFlags += -L$(OpenCLLibPath)
	endif
	GuiDFlags += -DSupportOpenCL
	GuiLFlags += -lOpenCL
	ifneq (,$(filter embed_files,$(CONFIG)))
		GuiHFiles += $(Pfx)perturb.cl$(EmbedSfx)
	endif
endif
ifneq (,$(filter opengl,$(CONFIG)))
	GuiHFiles += gui-opengl.c
	GuiDFlags += -DSupportOpenGL
	ifneq (,$(filter embed_files,$(CONFIG)))
		GuiHFiles += $(Pfx)phong.glsl$(EmbedSfx)
	endif
endif
ifneq (,$(filter embed_files,$(CONFIG)))
	GuiDFlags += -DEmbedFiles
endif
## When using OpenGL, make rendering match the ray tracer.
## This shows slices thru tetrahedra instead of a smooth
## interpolation between triangles.
ifneq (,$(filter match4dgeom,$(CONFIG)))
	GuiDFlags += -DMatch4dGeom
endif

ifneq (,$(patsubst ./,,$(dir $(Pfx))))
	GuiDFlags += '-DEmbedPathnamePfx=$(patsubst %/,%,$(dir $(Pfx)))'
endif
ifneq (,$(notdir $(Pfx)))
	GuiDFlags += '-DEmbedFilenamePfx=$(notdir $(Pfx))'
endif
ifeq ($(Pfx),$(notdir $(Pfx)))
	RunPfx = ./$(BinPath)/$(Pfx)
else
	RunPfx = $(BinPath)/$(Pfx)
endif


ExeList = $(addprefix $(Pfx),verify cli gui imgdiff file2array)
ExeList := $(addprefix $(BinPath)/,$(ExeList))
Objs = \
	affine.o \
	bbox.o \
    bitstring.o \
	compute.o \
    dynamic-setup.o \
    kdtree.o \
    kptree.o \
    lightcut.o \
    material.o \
    order.o \
    pnm-image.o \
    raytrace.o \
    scene.o \
    serial.o \
    simplex.o \
    slist.o \
    testcase.o \
    track.o \
    util.o \
    wavefront-file.o \
    xfrm.o \
	cli.o \
	file2array.o \
	gui.o \
	imgdiff.o

include $(CxPath)/include.mk

$(eval $(shell \
	sed \
	-e 's/\(.*\): *\(.*\)/$$(eval $$(BldPath)\/\1: $$(BldPath)\/\2)/' \
	deps.mk))

gui_exe = $(BinPath)/$(Pfx)$(call exename,gui)
cli_exe = $(BinPath)/$(Pfx)$(call exename,cli)
file2array_exe = $(BinPath)/$(Pfx)$(call exename,file2array)
verify_exe = $(BinPath)/$(Pfx)$(call exename,verify)

default_exes: $(verify_exe) $(gui_exe) $(cli_exe)
	# Finished: default

all: $(ExeList)
	# Finished: all



CFLAGS += $(IFLAGS)


CSources = affine.c \
		   bbox.c \
		   bitstring.c \
		   dynamic-setup.c \
		   kdtree.c \
		   kptree.c \
		   lightcut.c \
		   material.c \
		   order.c \
		   pnm-image.c \
		   raytrace.c \
		   scene.c \
		   serial.c \
		   simplex.c \
		   slist.c \
		   testcase.c \
		   track.c \
		   util.c \
		   wavefront-file.c \
		   xfrm.c

ifneq (,$(filter sse,$(CONFIG)))
	CFLAGS += -msse -msse2
	DFLAGS += -DPackOpsAvail
	CSources += pack.c
	GuiHFiles += raytrace-pack.c
endif

LFLAGS += -lm

# Note: OpenCL code does not function at this time, don't bother.
hello: hello.c $(CSources)
	$(CC) $(CFLAGS) $(DFLAGS) -I $(OpenCLPath)/include $< -o $@ \
		-L $(OpenCLLibPath) -lOpenCL $(LFLAGS)

.PHONY: test-hello
test-hello: hello
	LD_LIBRARY_PATH=$(OpenCLLibPath) ./$<

CliCFiles = cli.c
ifneq (,$(filter mpi trivialmpi,$(CONFIG)))
	CliCFiles += compute.c
	GuiCFiles += compute.c
endif

$(call binexe,$(Pfx)cli): \
	$(patsubst %.c,$(BldPath)/%.c, $(CliCFiles)) \
	$(patsubst %.c,$(BldPath)/%.o, $(CSources)) \
	$(addprefix $(CxBldPath)/, alphatab.o bstree.o fileb.o syscx.o)
	$(CC) $(CFLAGS) $(DFLAGS)  $^ -o $@ $(LFLAGS)

GuiCFlags += $(CFLAGS)
GuiDFlags += $(DFLAGS)
GuiLFlags += $(LFLAGS)

$(call binexe,$(Pfx)gui): \
	$(patsubst %.c,$(BldPath)/%.c, $(GuiCFiles)) \
	$(patsubst %.c,$(BldPath)/%.o, $(CSources)) \
	$(addprefix $(CxBldPath)/, alphatab.o bstree.o fileb.o syscx.o)
	$(CC) $(GuiCFlags) $(GuiDFlags) $^ -o $@ $(GuiLFlags)

$(gui_exe): | $(patsubst %,$(BldPath)/%, $(GuiHFiles))

run-$(Pfx)gui-opencl: $(gui_exe)
	LD_LIBRARY_PATH=$(OpenCLLibPath) ./$<

$(BldPath)/$(Pfx)phong.glsl$(EmbedSfx): phong.vert phong.frag 4d.vert $(file2array_exe)
	$(RunPfx)file2array $@ phong.vert phong.frag 4d.vert

$(BldPath)/$(Pfx)perturb.cl$(EmbedSfx): perturb.cl $(file2array_exe)
	$(RunPfx)file2array $@ perturb.cl

VerifyCFlags := $(CFLAGS)
#VerifyCFlags := $(filter-out -fwhole-program,$(CFLAGS))
#VerifyDFlags := $(filter-out -DIncludeC,$(DFLAGS))
VerifyCSources = verif/main.c verif/order.c verif/pack.c

$(patsubst %.c,$(BldPath)/%.c, $(VerifyCSources)): | $(BldPath)/verif

$(BldPath)/verif:
	mkdir -p $@

$(call binexe,$(Pfx)verify): \
	$(patsubst %.c,$(BldPath)/%.c, $(VerifyCSources)) \
	$(patsubst %.c,$(BldPath)/%.o, $(CSources)) \
	$(addprefix $(CxBldPath)/, alphatab.o bstree.o fileb.o syscx.o)
	$(CC) $(VerifyCFlags) $(VerifyDFlags) -I $(BldPath) $^ -o $@ $(LFLAGS)

$(call binexe,$(Pfx)imgdiff): $(BldPath)/imgdiff.o \
	$(BldPath)/pnm-image.o \
	$(BldPath)/util.o \
	$(addprefix $(CxBldPath)/, alphatab.o fileb.o syscx.o)
	$(CC) $(CFLAGS) $(DFLAGS) $^ -o $@ $(LFLAGS)

$(call binexe,$(Pfx)file2array): $(BldPath)/file2array.o \
	$(BldPath)/util.o \
	$(addprefix $(CxBldPath)/, alphatab.o fileb.o syscx.o)
	$(CC) $(CFLAGS) -o $@ $^ -lm

.PHONY: test
test: $(call exename,$(Pfx)cli)
	#valgrind --track-origins=yes ./$<
	./$<

.PHONY: ways
ways:
	$(MAKE) -f Makefile.ways

.PHONY: cleanways
cleanways:
	$(MAKE) -f Makefile.ways clean

.PHONY: clean
clean:
	rm -fr $(PfxBldPath)
	rm -f $(ExeList)


.PHONY: cleanall
cleanall: clean
	rm -f hello

